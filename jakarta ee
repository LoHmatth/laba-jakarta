
 Шаги по созданию проекта Jakarta EE: Киногерои
 1. Установка необходимых инструментов

- **Java Development Kit (JDK)**: Убедитесь, что у вас установлена последняя версия JDK.
- **Apache Maven**: Установите Maven для управления зависимостями.
- **Сервер приложений**: Например, Payara или WildFly, которые поддерживают Jakarta EE.
- **IDE**: Рекомендуется использовать IntelliJ IDEA, Eclipse или NetBeans.

 2. Создание Maven проекта
Создайте новый Maven проект. Вы можете использовать команду в терминале:

```bash
mvn archetype:generate -DgroupId=com.example -DartifactId=movie-heroes -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false
```

Перейдите в созданный каталог проекта:

```bash
cd movie-heroes
```

 3. Структура проекта

После создания проекта структура должна выглядеть примерно так:

```
movie-heroes
│
├── pom.xml
└── src
    ├── main
    │   ├── java
    │   │   └── com
    │   │       └── example
    │   │           └── hero
    │   │               ├── Hero.java
    │   │               └── HeroService.java
    │   └── webapp
    │       ├── WEB-INF
    │       │   └── web.xml
    │       └── index.jsp
```

 4. Настройка `pom.xml`

Добавьте зависимости для Jakarta EE. Например, для Jakarta EE 9:

```xml
<properties>
    <jakartaee.version>9.0.0</jakartaee.version>
</properties>

<dependencies>
    <dependency>
        <groupId>jakarta.jakartaee-api</groupId>
        <artifactId>jakarta.jakartaee-api</artifactId>
        <version>${jakartaee.version}</version>
        <scope>provided</scope>
    </dependency>
</dependencies>
```

 5. Создание класса `Hero`

Создайте класс `Hero.java`, который будет представлять киногероя.

```java
package com.example.hero;

import java.io.Serializable;

public class Hero implements Serializable {
    private Long id;
    private String name;
    private String movie;

    public Hero() {}

    public Hero(Long id, String name, String movie) {
        this.id = id;
        this.name = name;
        this.movie = movie;
    }

    // Геттеры и сеттеры
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getMovie() {
        return movie;
    }

    public void setMovie(String movie) {
        this.movie = movie;
    }
}
```

6. Создание класса `HeroService`

Создайте класс `HeroService.java`, который будет управлять героями.

```java
package com.example.hero;

import javax.enterprise.context.ApplicationScoped;
import java.util.ArrayList;
import java.util.List;

@ApplicationScoped
public class HeroService {
    private List<Hero> heroes = new ArrayList<>();

    public void addHero(Hero hero) {
        heroes.add(hero);
    }

    public List<Hero> getHeroes() {
        return heroes;
    }
}
```

7. Настройка `web.xml`

Создайте файл `web.xml` в `WEB-INF`, чтобы настроить сервлеты или фильтры, если это необходимо.

```xml
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
    <servlet>
        <servlet-name>HeroServlet</servlet-name>
        <servlet-class>com.example.hero.HeroServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>HeroServlet</servlet-name>
        <url-pattern>/heroes</url-pattern>
    </servlet-mapping>
</web-app>
```

 8. Создание простого интерфейса

Создайте файл `index.jsp` в каталоге `webapp`, чтобы взаимодействовать с пользователем.

```jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="com.example.hero.HeroService" %>
<%@ page import="javax.naming.InitialContext" %>
<%@ page import="javax.naming.NamingException" %>

<%
    HeroService heroService = (HeroService) new InitialContext().lookup("java:global/movie-heroes/HeroService");
    heroService.addHero(new Hero(1L, "Iron Man", "Iron Man"));
    heroService.addHero(new Hero(2L, "Captain America", "Captain America"));
%>

<!DOCTYPE html>
<html>
<head>
    <title>Киногерои</title>
</head>
<body>
<h1>Киногерои</h1>
<ul>
    <%
        for (Hero hero : heroService.getHeroes()) {
            out.println("<li>" + hero.getName() + " из " + hero.getMovie() + "</li>");
        }
    %>
</ul>
</body>
</html>
```

 9. Запуск приложения

1. **Соберите проект**: Используйте команду Maven для сборки проекта.

   ```bash
   mvn clean package
   ```

2. **Разверните приложение**: Разверните сгенерированный WAR файл на сервере приложений (например, в Payara или WildFly).

3. **Откройте браузер**: Перейдите по адресу `http://localhost:8080/movie-heroes/` (или другой порт, если используется).
